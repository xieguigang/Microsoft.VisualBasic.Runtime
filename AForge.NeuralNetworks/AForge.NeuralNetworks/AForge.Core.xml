<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AForge.NeuralNetworks</name>
    </assembly>
    <members>
        <member name="T:AForge.Controls.Chart">
            <summary>
            Chart control
            </summary>
            
            <remarks>The chart control allows to display multiple charts at time
            of different types: dots, lines, connected dots.</remarks>
            
        </member>
        <member name="T:AForge.Controls.Chart.SeriesType">
            <summary>
            Chart series type enumeration
            </summary>
        </member>
        <member name="F:AForge.Controls.Chart.SeriesType.Line">
            <summary>
            Line style
            </summary>
        </member>
        <member name="F:AForge.Controls.Chart.SeriesType.Dots">
            <summary>
            Dots style
            </summary>
        </member>
        <member name="F:AForge.Controls.Chart.SeriesType.ConnectedDots">
            <summary>
            Connected dots style
            </summary>
        </member>
        <member name="P:AForge.Controls.Chart.RangeX">
            <summary>
            Chart's X range
            </summary>
            
            <remarks>The value sets the X's range of data to be displayed on the chart</remarks>
            
        </member>
        <member name="P:AForge.Controls.Chart.RangeY">
             <summary>
             Chart's Y range
             </summary>
             
             <remarks>The value sets the Y's range of data to be displayed on the chart</remarks>
            
        </member>
        <member name="F:AForge.Controls.Chart.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AForge.Controls.Chart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Controls.Chart"/> class
            </summary>
        </member>
        <member name="M:AForge.Controls.Chart.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:AForge.Controls.Chart.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:AForge.Controls.Chart.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the control with all available data series
            </summary>
            
            <param name="pe">Data for Paint event</param>
            
        </member>
        <member name="M:AForge.Controls.Chart.AddDataSeries(System.String,System.Drawing.Color,AForge.Controls.Chart.SeriesType,System.Int32)">
            <summary>
            Add data series to the chart
            </summary>
            
            <param name="name">Data series name</param>
            <param name="color">Data series color</param>
            <param name="type">Data series type</param>
            <param name="width">Width (depends on the data series type, see remarks)</param>
            
            <remarks>Adds new empty data series to the collection of data series. To update this
            series the <see cref="M:AForge.Controls.Chart.UpdateDataSeries(System.String,System.Double[0:,0:])"/> method should be used.<br /><br />
            The meaning of the width parameter depends on the data series type:
            <list type="bullet">
            <item><b>Line</b> - width of the line;</item>
            <item><b>Dots</b> - size of dots (rectangular dots with specified width and the same height);</item>
            <item><b>Connected dots</b> - size of dots (dots are connected with one pixel width line).</item>
            </list>
            </remarks>
            
        </member>
        <member name="M:AForge.Controls.Chart.AddDataSeries(System.String,System.Drawing.Color,AForge.Controls.Chart.SeriesType,System.Int32,System.Boolean)">
            <summary>
            Add data series to the chart
            </summary>
            
            <param name="name">Data series name</param>
            <param name="color">Data series color</param>
            <param name="type">Data series type</param>
            <param name="width">Width (depends on the data series type, see remarks)</param>
            <param name="updateYRange">Specifies if <see cref="P:AForge.Controls.Chart.RangeY"/> should be updated</param>
            
            <remarks>Adds new empty data series to the collection of data series. The <b>updateYRange</b>
            parameter specifies if the data series can affect displayable Y range.</remarks>
            
        </member>
        <member name="M:AForge.Controls.Chart.UpdateDataSeries(System.String,System.Double[0:,0:])">
            <summary>
            Update data series on the chart
            </summary>
            
            <param name="name">Data series name to update</param>
            <param name="data">Data series values</param>
            
        </member>
        <member name="M:AForge.Controls.Chart.RemoveDataSeries(System.String)">
            <summary>
            Remove data series from the chart
            </summary>
            
            <param name="name">Data series name</param>
            
        </member>
        <member name="M:AForge.Controls.Chart.RemoveAllDataSeries">
            <summary>
            Remove all data series from the chart
            </summary>
        </member>
        <member name="M:AForge.Controls.Chart.UpdateYRange">
            <summary>
            displayable Y range
            </summary>
        </member>
        <member name="T:AForge.DoubleRange">
            <summary>
            Represents a double range with minimum and maximum values
            </summary>
        </member>
        <member name="P:AForge.DoubleRange.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:AForge.DoubleRange.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:AForge.DoubleRange.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values)
            </summary>
        </member>
        <member name="M:AForge.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DoubleRange"/> class
            </summary>
            
            <param name="min">Minimum value of the range</param>
            <param name="max">Maximum value of the range</param>
        </member>
        <member name="M:AForge.DoubleRange.IsInside(System.Double)">
            <summary>
            Check if the specified value is inside this range
            </summary>
            
            <param name="x">Value to check</param>
            
            <returns><b>True</b> if the specified value is inside this range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.IsInside(AForge.DoubleRange)">
            <summary>
            Check if the specified range is inside this range
            </summary>
            
            <param name="range">Range to check</param>
            
            <returns><b>True</b> if the specified range is inside this range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.IsOverlapping(AForge.DoubleRange)">
            <summary>
            Check if the specified range overlaps with this range
            </summary>
            
            <param name="range">Range to check for overlapping</param>
            
            <returns><b>True</b> if the specified range overlaps with this range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="T:AForge.IntRange">
            <summary>
            Represents an integer range with minimum and maximum values
            </summary>
        </member>
        <member name="P:AForge.IntRange.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:AForge.IntRange.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:AForge.IntRange.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values)
            </summary>
        </member>
        <member name="M:AForge.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.IntRange"/> class
            </summary>
            
            <param name="min">Minimum value of the range</param>
            <param name="max">Maximum value of the range</param>
        </member>
        <member name="M:AForge.IntRange.IsInside(System.Int32)">
            <summary>
            Check if the specified value is inside this range
            </summary>
            
            <param name="x">Value to check</param>
            
            <returns><b>True</b> if the specified value is inside this range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.IntRange.IsInside(AForge.IntRange)">
            <summary>
            Check if the specified range is inside this range
            </summary>
            
            <param name="range">Range to check</param>
            
            <returns><b>True</b> if the specified range is inside this range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.IntRange.IsOverlapping(AForge.IntRange)">
            <summary>
            Check if the specified range overlaps with this range
            </summary>
            
            <param name="range">Range to check for overlapping</param>
            
            <returns><b>True</b> if the specified range overlaps with this range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="T:AForge.Neuro.BipolarSigmoidFunction">
             <summary>
             Bipolar sigmoid activation function
             </summary>
            
             <remarks>The class represents bipolar sigmoid activation function with
             the next expression:<br />
             <code>
                            2
             f(x) = ------------------ - 1
                    1 + exp(-alpha * x)
            
                       2 * alpha * exp(-alpha * x )
             f'(x) = -------------------------------- = alpha * (1 - f(x)^2) / 2
                       (1 + exp(-alpha * x))^2
             </code>
             Output range of the function: <b>[-1, 1]</b><br /><br />
             Functions graph:<br />
             <img src="sigmoid_bipolar.bmp" width="242" height="172" />
             </remarks>
        </member>
        <member name="P:AForge.Neuro.BipolarSigmoidFunction.Alpha">
             <summary>
             Sigmoid's alpha value
             </summary>
            
             <remarks>The value determines steepness of the function. Default value: <b>2</b>.
             </remarks>
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.SigmoidFunction"/> class
            </summary>
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.BipolarSigmoidFunction"/> class
            </summary>
            
            <param name="alpha">Sigmoid's alpha value</param>
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.Function(System.Double)">
             <summary>
             Calculates function value
             </summary>
            
             <param name="x">Function input value</param>
             
             <returns>Function output value, <i>f(x)</i></returns>
            
             <remarks>The method calculates function value at point <b>x</b>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.Derivative(System.Double)">
             <summary>
             Calculates function derivative
             </summary>
             
             <param name="x">Function input value</param>
             
             <returns>Function derivative, <i>f'(x)</i></returns>
             
             <remarks>The method calculates function derivative at point <b>x</b>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.Derivative2(System.Double)">
            <summary>
            Calculates function derivative
            </summary>
            
            <param name="y">Function output value - the value, which was obtained
            with the help of <see cref="M:AForge.Neuro.BipolarSigmoidFunction.Function(System.Double)"/> method</param>
            
            <returns>Function derivative, <i>f'(x)</i></returns>
            
            <remarks>The method calculates the same derivative value as the
            <see cref="M:AForge.Neuro.BipolarSigmoidFunction.Derivative(System.Double)"/> method, but it takes not the input <b>x</b> value
            itself, but the function value, which was calculated previously with
            the help of <see cref="M:AForge.Neuro.BipolarSigmoidFunction.Function(System.Double)"/> method. <i>(Some applications require as
            function value, as derivative value, so they can seve the amount of
            calculations using this method to calculate derivative)</i></remarks>
            
        </member>
        <member name="T:AForge.Neuro.IActivationFunction">
            <summary>
            Activation function interface
            </summary>
            
            <remarks>All activation functions, which are supposed to be used with
            neurons, which calculate their output as a function of weighted sum of
            their inputs, should implement this interfaces.
            </remarks>
        </member>
        <member name="M:AForge.Neuro.IActivationFunction.Function(System.Double)">
             <summary>
             Calculates function value
             </summary>
            
             <param name="x">Function input value</param>
             
             <returns>Function output value, <i>f(x)</i></returns>
            
             <remarks>The method calculates function value at point <b>x</b>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.IActivationFunction.Derivative(System.Double)">
             <summary>
             Calculates function derivative
             </summary>
             
             <param name="x">Function input value</param>
             
             <returns>Function derivative, <i>f'(x)</i></returns>
             
             <remarks>The method calculates function derivative at point <b>x</b>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.IActivationFunction.Derivative2(System.Double)">
            <summary>
            Calculates function derivative
            </summary>
            
            <param name="y">Function output value - the value, which was obtained
            with the help of <see cref="M:AForge.Neuro.IActivationFunction.Function(System.Double)"/> method</param>
            
            <returns>Function derivative, <i>f'(x)</i></returns>
            
            <remarks>The method calculates the same derivative value as the
            <see cref="M:AForge.Neuro.IActivationFunction.Derivative(System.Double)"/> method, but it takes not the input <b>x</b> value
            itself, but the function value, which was calculated previously with
            the help of <see cref="M:AForge.Neuro.IActivationFunction.Function(System.Double)"/> method. <i>(Some applications require as
            function value, as derivative value, so they can seve the amount of
            calculations using this method to calculate derivative)</i></remarks>
            
        </member>
        <member name="T:AForge.Neuro.SigmoidFunction">
             <summary>
             Sigmoid activation function
             </summary>
            
             <remarks>The class represents sigmoid activation function with
             the next expression:<br />
             <code>
                            1
             f(x) = ------------------
                    1 + exp(-alpha * x)
            
                       alpha * exp(-alpha * x )
             f'(x) = ---------------------------- = alpha * f(x) * (1 - f(x))
                       (1 + exp(-alpha * x))^2
             </code>
             Output range of the function: <b>[0, 1]</b><br /><br />
             Functions graph:<br />
             <img src="sigmoid.bmp" width="242" height="172" />
             </remarks>
        </member>
        <member name="P:AForge.Neuro.SigmoidFunction.Alpha">
            <summary>
            Sigmoid's alpha value
            </summary>
            
            <remarks>The value determines steepness of the function. Default value: <b>2</b>.
            </remarks>
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.SigmoidFunction"/> class
            </summary>
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.SigmoidFunction"/> class
            </summary>
            
            <param name="alpha">Sigmoid's alpha value</param>
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.Function(System.Double)">
             <summary>
             Calculates function value
             </summary>
            
             <param name="x">Function input value</param>
             
             <returns>Function output value, <i>f(x)</i></returns>
            
             <remarks>The method calculates function value at point <b>x</b>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.Derivative(System.Double)">
             <summary>
             Calculates function derivative
             </summary>
             
             <param name="x">Function input value</param>
             
             <returns>Function derivative, <i>f'(x)</i></returns>
             
             <remarks>The method calculates function derivative at point <b>x</b>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.Derivative2(System.Double)">
            <summary>
            Calculates function derivative
            </summary>
            
            <param name="y">Function output value - the value, which was obtained
            with the help of <see cref="M:AForge.Neuro.SigmoidFunction.Function(System.Double)"/> method</param>
            
            <returns>Function derivative, <i>f'(x)</i></returns>
            
            <remarks>The method calculates the same derivative value as the
            <see cref="M:AForge.Neuro.SigmoidFunction.Derivative(System.Double)"/> method, but it takes not the input <b>x</b> value
            itself, but the function value, which was calculated previously with
            the help of <see cref="M:AForge.Neuro.SigmoidFunction.Function(System.Double)"/> method. <i>(Some applications require as
            function value, as derivative value, so they can seve the amount of
            calculations using this method to calculate derivative)</i></remarks>
            
        </member>
        <member name="T:AForge.Neuro.ThresholdFunction">
             <summary>
             Threshold activation function
             </summary>
            
             <remarks>The class represents threshold activation function with
             the next expression:<br />
             <code>
             f(x) = 1, if x >= 0, otherwise 0
             </code>
             Output range of the function: <b>[0, 1]</b><br /><br />
             Functions graph:<br />
             <img src="threshold.bmp" width="242" height="172" />
             </remarks>
        </member>
        <member name="M:AForge.Neuro.ThresholdFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.ThresholdFunction"/> class
            </summary>
        </member>
        <member name="M:AForge.Neuro.ThresholdFunction.Function(System.Double)">
             <summary>
             Calculates function value
             </summary>
            
             <param name="x">Function input value</param>
             
             <returns>Function output value, <i>f(x)</i></returns>
            
             <remarks>The method calculates function value at point <b>x</b>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.ThresholdFunction.Derivative(System.Double)">
             <summary>
             Not supported
             </summary>
             
             <param name="x">Input value</param>
             
             <returns>Always returns 0</returns>
             
             <remarks>The method is not supported, because it is not possible to
             calculate derivative of the function.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.ThresholdFunction.Derivative2(System.Double)">
            <summary>
            Not supported
            </summary>
            
            <param name="y">Input value</param>
            
            <returns>Always returns 0</returns>
            
            <remarks>The method is not supported, because it is not possible to
            calculate derivative of the function.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.ActivationLayer">
             <summary>
             Activation layer
             </summary>
             
             <remarks>Activation layer is a layer of <see cref="T:AForge.Neuro.ActivationNeuron">activation neurons</see>.
             The layer is usually used in multi-layer neural networks.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.ActivationLayer.Item(System.Int32)">
            <summary>
            Layer's neurons accessor
            </summary>
            
            <param name="index">Neuron index</param>
            
            <remarks>Allows to access layer's neurons.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.ActivationLayer.#ctor(System.Int32,System.Int32,AForge.Neuro.IActivationFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.ActivationLayer"/> class
            </summary>
            <param name="neuronsCount">Layer's neurons count</param>
            <param name="inputsCount">Layer's inputs count</param>
            <param name="function">Activation function of neurons of the layer</param>
            
            <remarks>The new layet will be randomized (see <see cref="M:AForge.Neuro.ActivationNeuron.Randomize"/>
            method) after it is created.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.DistanceLayer">
            <summary>
            Distance layer
            </summary>
            
            <remarks>Distance layer is a layer of <see cref="T:AForge.Neuro.DistanceNeuron">distance neurons</see>.
            The layer is usually a single layer of such networks as Kohonen Self
            Organizing Map, Elastic Net, Hamming Memory Net.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.DistanceLayer.Item(System.Int32)">
            <summary>
            Layer's neurons accessor
            </summary>
            
            <param name="index">Neuron index</param>
            
            <remarks>Allows to access layer's neurons.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.DistanceLayer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.DistanceLayer"/> class
            </summary>
            
            <param name="neuronsCount">Layer's neurons count</param>
            <param name="inputsCount">Layer's inputs count</param>
            
            <remarks>The new layet will be randomized (see <see cref="M:AForge.Neuro.Neuron.Randomize"/>
            method) after it is created.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.Layer">
            <summary>
            Base neural layer class
            </summary>
            
            <remarks>This is a base neural layer class, which represents
            collection of neurons.</remarks>
            
        </member>
        <member name="F:AForge.Neuro.Layer.inputsCount">
            <summary>
            Layer's inputs count
            </summary>
        </member>
        <member name="F:AForge.Neuro.Layer.neuronsCount">
            <summary>
            Layer's neurons count
            </summary>
        </member>
        <member name="F:AForge.Neuro.Layer.neurons">
            <summary>
            Layer's neurons
            </summary>
        </member>
        <member name="F:AForge.Neuro.Layer.output">
            <summary>
            Layer's output vector
            </summary>
        </member>
        <member name="P:AForge.Neuro.Layer.InputsCount">
            <summary>
            Layer's inputs count
            </summary>
        </member>
        <member name="P:AForge.Neuro.Layer.NeuronsCount">
            <summary>
            Layer's neurons count
            </summary>
        </member>
        <member name="P:AForge.Neuro.Layer.Output">
            <summary>
            Layer's output vector
            </summary>
            
            <remarks>The calculation way of layer's output vector is determined by
            inherited class.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Layer.Item(System.Int32)">
            <summary>
            Layer's neurons accessor
            </summary>
            
            <param name="index">Neuron index</param>
            
            <remarks>Allows to access layer's neurons.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Layer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Layer"/> class
            </summary>
            
            <param name="neuronsCount">Layer's neurons count</param>
            <param name="inputsCount">Layer's inputs count</param>
            
            <remarks>Protected contructor, which initializes <see cref="F:AForge.Neuro.Layer.inputsCount"/>,
            <see cref="F:AForge.Neuro.Layer.neuronsCount"/>, <see cref="F:AForge.Neuro.Layer.neurons"/> and <see cref="F:AForge.Neuro.Layer.output"/>
            members.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Layer.Compute(System.Double[])">
            <summary>
            Compute output vector of the layer 
            </summary>
            
            <param name="input">Input vector</param>
            
            <returns>Returns layer's output vector</returns>
            
            <remarks>The actual layer's output vector is determined by inherited class and it
            consists of output values of layer's neurons. The output vector is also stored in
            <see cref="P:AForge.Neuro.Layer.Output"/> property.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Layer.Randomize">
            <summary>
            Randomize neurons of the layer
            </summary>
            
            <remarks>Randomizes layer's neurons by calling <see cref="M:AForge.Neuro.Neuron.Randomize"/> method
            of each neuron.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.BackPropagationLearning">
            <summary>
            Back propagation learning algorithm
            </summary>
            
            <remarks>The class implements back propagation learning algorithm,
            which is widely used for training multi-layer neural networks with
            continuous activation functions.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.BackPropagationLearning.LearningRate">
            <summary>
            Learning rate
            </summary>
            
            <remarks>The value determines speed of learning. Default value equals to 0.1.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.BackPropagationLearning.Momentum">
            <summary>
            Momentum
            </summary>
            
            <remarks>The value determines the portion of previous weight's update
            to use on current iteration. Weight's update values are calculated on
            each iteration depending on neuron's error. The momentum specifies the amount
            of update to use from previous iteration and the amount of update
            to use from current iteration. If the value is equal to 0.1, for example,
            then 0.1 portion of previous update and 0.9 portion of current update are used
            to update weight's value.<br /><br />
            Default value equals to 0.0.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.#ctor(AForge.Neuro.ActivationNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.BackPropagationLearning"/> class
            </summary>
            
            <param name="network">Network to teach</param>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.Run(System.Double[],System.Double[])">
             <summary>
             Runs learning iteration
             </summary>
             
             <param name="input">input vector</param>
             <param name="output">desired output vector</param>
             
             <returns>Returns squared error of the last layer divided by 2</returns>
             
             <remarks>Runs one learning iteration and updates neuron's
             weights.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.RunEpoch(System.Double[][],System.Double[][])">
            <summary>
            Runs learning epoch
            </summary>
            
            <param name="input">array of input vectors</param>
            <param name="output">array of output vectors</param>
            
            <returns>Returns sum of squared errors of the last layer divided by 2</returns>
            
            <remarks>Runs series of learning iterations - one iteration
            for each input sample. Updates neuron's weights after each sample
            presented.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.CalculateError(System.Double[])">
            <summary>
            Calculates error values for all neurons of the network
            </summary>
            
            <param name="desiredOutput">Desired output vector</param>
            
            <returns>Returns summary squared error of the last layer divided by 2</returns>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.CalculateUpdates(System.Double[])">
            <summary>
            Calculate weights updates
            </summary>
            
            <param name="input">Network's input vector</param>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.UpdateNetwork">
            <summary>
            Update network'sweights
            </summary>
            
        </member>
        <member name="T:AForge.Neuro.Learning.DeltaRuleLearning">
            <summary>
            Delta rule learning algorithm
            </summary>
            
            <remarks>This learning algorithm is used to train one layer neural
            network of <see cref="T:AForge.Neuro.ActivationNeuron">Activation Neurons</see>
            with continuous activation function, see <see cref="T:AForge.Neuro.SigmoidFunction"/>
            for example.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.DeltaRuleLearning.LearningRate">
            <summary>
            Learning rate
            </summary>
            
            <remarks>The value determines speed of learning  in the range of [0, 1].
            Default value equals to 0.1.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.DeltaRuleLearning.#ctor(AForge.Neuro.ActivationNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.DeltaRuleLearning"/> class
            </summary>
            
            <param name="network">Network to teach</param>
            
        </member>
        <member name="M:AForge.Neuro.Learning.DeltaRuleLearning.Run(System.Double[],System.Double[])">
             <summary>
             Runs learning iteration
             </summary>
             
             <param name="input">input vector</param>
             <param name="output">desired output vector</param>
             
             <returns>Returns squared error divided by 2</returns>
             
             <remarks>Runs one learning iteration and updates neuron's
             weights.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.DeltaRuleLearning.RunEpoch(System.Double[][],System.Double[][])">
            <summary>
            Runs learning epoch
            </summary>
            
            <param name="input">array of input vectors</param>
            <param name="output">array of output vectors</param>
            
            <returns>Returns sum of squared errors divided by 2</returns>
            
            <remarks>Runs series of learning iterations - one iteration
            for each input sample. Updates neuron's weights after each sample
            presented.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.ElasticNetworkLearning">
             <summary>
             Elastic network learning algorithm
             </summary>
            
             <remarks>This class implements elastic network's learning algorithm and
             allows to train <see cref="T:AForge.Neuro.DistanceNetwork">Distance Networks</see>.
             </remarks> 
            
        </member>
        <member name="P:AForge.Neuro.Learning.ElasticNetworkLearning.LearningRate">
            <summary>
            Learning rate
            </summary>
            
            <remarks>Determines speed of learning. Value range is [0, 1].
            Default value equals to 0.1.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.ElasticNetworkLearning.LearningRadius">
            <summary>
            Learning radius
            </summary>
            
            <remarks>Determines the amount of neurons to be updated around
            winner neuron. Neurons, which are in the circle of specified radius,
            are updated during the learning procedure. Neurons, which are closer
            to the winner neuron, get more update.<br /><br />
            Default value equals to 0.5.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ElasticNetworkLearning.#ctor(AForge.Neuro.DistanceNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.ElasticNetworkLearning"/> class
            </summary>
            
            <param name="network">Neural network to train</param>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ElasticNetworkLearning.Run(System.Double[])">
            <summary>
            Runs learning iteration
            </summary>
            
            <param name="input">input vector</param>
            
            <returns>Returns learning error - summary absolute difference between updated
            weights and according inputs. The difference is measured according to the neurons
            distance to the winner neuron.</returns>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ElasticNetworkLearning.RunEpoch(System.Double[][])">
            <summary>
            Runs learning epoch
            </summary>
            
            <param name="input">array of input vectors</param>
            
            <returns>Returns summary learning error for the epoch. See <see cref="M:AForge.Neuro.Learning.ElasticNetworkLearning.Run(System.Double[])"/>
            method for details about learning error calculation.</returns>
            
        </member>
        <member name="T:AForge.Neuro.Learning.ISupervisedLearning">
            <summary>
            Supervised learning interface
            </summary>
            
            <remarks>The interface describes methods, which should be implemented
            by all supervised learning algorithms. Supervised learning is such a
            type of learning algorithms, where system's desired output is known on
            the learning stage. So, given sample input values and desired outputs,
            system should adopt its internals to produce correct (or closer to correct)
            result after the learning step is complete.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ISupervisedLearning.Run(System.Double[],System.Double[])">
            <summary>
            Runs learning iteration
            </summary>
            
            <param name="input">input vector</param>
            <param name="output">desired output vector</param>
            
            <returns>Returns learning error</returns>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ISupervisedLearning.RunEpoch(System.Double[][],System.Double[][])">
            <summary>
            Runs learning epoch
            </summary>
            
            <param name="input">array of input vectors</param>
            <param name="output">array of output vectors</param>
            
            <returns>Returns sum of learning errors</returns>
            
        </member>
        <member name="T:AForge.Neuro.Learning.IUnsupervisedLearning">
            <summary>
            Unsupervised learning interface
            </summary>
            
            <remarks>The interface describes methods, which should be implemented
            by all unsupervised learning algorithms. Unsupervised learning is such a
            type of learning algorithms, where system's desired output is not known on
            the learning stage. Given sample input values, it is expected, that
            system will organize itself in the way to find similarities betweed provided
            samples.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.IUnsupervisedLearning.Run(System.Double[])">
            <summary>
            Runs learning iteration
            </summary>
            
            <param name="input">input vector</param>
            
            <returns>Returns learning error</returns>
            
        </member>
        <member name="M:AForge.Neuro.Learning.IUnsupervisedLearning.RunEpoch(System.Double[][])">
             <summary>
             Runs learning epoch
             </summary>
             
             <param name="input">array of input vectors</param>
            
             <returns>Returns sum of learning errors</returns>
             
        </member>
        <member name="T:AForge.Neuro.Learning.PerceptronLearning">
            <summary>
            Perceptron learning algorithm
            </summary>
            
            <remarks>This learning algorithm is used to train one layer neural
            network of <see cref="T:AForge.Neuro.ActivationNeuron">Activation Neurons</see>
            with the <see cref="T:AForge.Neuro.ThresholdFunction">Threshold</see>
            activation function.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.PerceptronLearning.LearningRate">
            <summary>
            Learning rate
            </summary>
            
            <remarks>The value determines speed of learning in the range of [0, 1].
            Default value equals to 0.1.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.PerceptronLearning.#ctor(AForge.Neuro.ActivationNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.PerceptronLearning"/> class
            </summary>
            
            <param name="network">Network to teach</param>
            
        </member>
        <member name="M:AForge.Neuro.Learning.PerceptronLearning.Run(System.Double[],System.Double[])">
            <summary>
            Runs learning iteration
            </summary>
            
            <param name="input">input vector</param>
            <param name="output">desired output vector</param>
            
            <returns>Returns absolute error - difference between real output and
            desired output</returns>
            
            <remarks>Runs one learning iteration and updates neuron's
            weights in case if neuron's output does not equal to the
            desired output.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.PerceptronLearning.RunEpoch(System.Double[][],System.Double[][])">
            <summary>
            Runs learning epoch
            </summary>
            
            <param name="input">array of input vectors</param>
            <param name="output">array of output vectors</param>
            
            <returns>Returns sum of absolute errors</returns>
            
            <remarks>Runs series of learning iterations - one iteration
            for each input sample. Updates neuron's weights each time,
            when neuron's output does not equal to the desired output.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.SOMLearning">
            <summary>
            Kohonen Self Organizing Map (SOM) learning algorithm
            </summary>
            
            <remarks>This class implements Kohonen's SOM learning algorithm and
            is widelí used in clusterization tasks. The class allows to train
            <see cref="T:AForge.Neuro.DistanceNetwork">Distance Networks</see>.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.SOMLearning.LearningRate">
            <summary>
            Learning rate
            </summary>
            
            <remarks>Determines speed of learning. Value range is [0, 1].
            Default value equals to 0.1.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.SOMLearning.LearningRadius">
            <summary>
            Learning radius
            </summary>
            
            <remarks>Determines the amount of neurons to be updated around
            winner neuron. Neurons, which are in the circle of specified radius,
            are updated during the learning procedure. Neurons, which are closer
            to the winner neuron, get more update.<br /><br />
            Default value equals to 7.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.SOMLearning.#ctor(AForge.Neuro.DistanceNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.SOMLearning"/> class
            </summary>
            
            <param name="network">Neural network to train</param>
            
            <remarks>This constructor supposes that a square network will be passed for training -
            it should be possible to get square root of network's neurons amount.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.SOMLearning.#ctor(AForge.Neuro.DistanceNetwork,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.SOMLearning"/> class
             </summary>
             
             <param name="network">Neural network to train</param>
             <param name="width">Neural network's width</param>
             <param name="height">Neural network's height</param>
            
             <remarks>The constructor allows to pass network of arbitrary rectangular shape.
             The amount of neurons in the network should be equal to <b>width</b> * <b>height</b>.
             </remarks> 
            
        </member>
        <member name="M:AForge.Neuro.Learning.SOMLearning.Run(System.Double[])">
            <summary>
            Runs learning iteration
            </summary>
            
            <param name="input">input vector</param>
            
            <returns>Returns learning error - summary absolute difference between updated
            weights and according inputs. The difference is measured according to the neurons
            distance to the  winner neuron.</returns>
            
        </member>
        <member name="M:AForge.Neuro.Learning.SOMLearning.RunEpoch(System.Double[][])">
            <summary>
            Runs learning epoch
            </summary>
            
            <param name="input">array of input vectors</param>
            
            <returns>Returns summary learning error for the epoch. See <see cref="M:AForge.Neuro.Learning.SOMLearning.Run(System.Double[])"/>
            method for details about learning error calculation.</returns>
            
        </member>
        <member name="T:AForge.Neuro.ActivationNetwork">
             <summary>
             Activation network
             </summary>
             
             <remarks>Activation network is a base for multi-layer neural network
             with activation functions. It consists of <see cref="T:AForge.Neuro.ActivationLayer">activation
             layers</see>.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.ActivationNetwork.Item(System.Int32)">
            <summary>
            Network's layers accessor
            </summary>
            
            <param name="index">Layer index</param>
            
            <remarks>Allows to access network's layer.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.ActivationNetwork.#ctor(AForge.Neuro.IActivationFunction,System.Int32,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.ActivationNetwork"/> class
            </summary>
            <param name="function">Activation function of neurons of the network</param>
            <param name="inputsCount">Network's inputs count</param>
            <param name="neuronsCount">Array, which specifies the amount of neurons in
            each layer of the neural network</param>
            
            <remarks>The new network will be randomized (see <see cref="M:AForge.Neuro.ActivationNeuron.Randomize"/>
            method) after it is created.</remarks>
            
            <example>The following sample illustrates the usage of <c>ActivationNetwork</c> class:
            <code>
            	// create activation network
            	ActivationNetwork network = new ActivationNetwork(
            		new SigmoidFunction( ), // sigmoid activation function
            		3,                      // 3 inputs
            		4, 1 );                 // 2 layers:
                                            // 4 neurons in the firs layer
                                            // 1 neuron in the second layer
            </code>
            </example>
            
        </member>
        <member name="T:AForge.Neuro.DistanceNetwork">
             <summary>
             Distance network
             </summary>
            
             <remarks>Distance network is a neural network of only one <see cref="T:AForge.Neuro.DistanceLayer">distance
             layer</see>. The network is a base for such neural networks as SOM, Elastic net, etc.
             </remarks>
            
        </member>
        <member name="P:AForge.Neuro.DistanceNetwork.Item(System.Int32)">
            <summary>
            Network's layers accessor
            </summary>
            
            <param name="index">Layer index</param>
            
            <remarks>Allows to access network's layer.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.DistanceNetwork.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.DistanceNetwork"/> class
            </summary>
            
            <param name="inputsCount">Network's inputs count</param>
            <param name="neuronsCount">Network's neurons count</param>
            
            <remarks>The new network will be randomized (see <see cref="M:AForge.Neuro.Neuron.Randomize"/>
            method) after it is created.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.DistanceNetwork.GetWinner">
            <summary>
            Get winner neuron
            </summary>
            
            <returns>Index of the winner neuron</returns>
            
            <remarks>The method returns index of the neuron, which weights have
            the minimum distance from network's input.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.Network">
            <summary>
            Base neural network class
            </summary>
            
            <remarks>This is a base neural netwok class, which represents
            collection of neuron's layers.</remarks>
            
        </member>
        <member name="F:AForge.Neuro.Network.inputsCount">
            <summary>
            Network's inputs count
            </summary>
        </member>
        <member name="F:AForge.Neuro.Network.layersCount">
            <summary>
            Network's layers count
            </summary>
        </member>
        <member name="F:AForge.Neuro.Network.layers">
            <summary>
            Network's layers
            </summary>
        </member>
        <member name="F:AForge.Neuro.Network.output">
            <summary>
            Network's output vector
            </summary>
        </member>
        <member name="P:AForge.Neuro.Network.InputsCount">
            <summary>
            Network's inputs count
            </summary>
        </member>
        <member name="P:AForge.Neuro.Network.LayersCount">
            <summary>
            Network's layers count
            </summary>
        </member>
        <member name="P:AForge.Neuro.Network.Output">
            <summary>
            Network's output vector
            </summary>
            
            <remarks>The calculation way of network's output vector is determined by
            inherited class.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Network.Item(System.Int32)">
            <summary>
            Network's layers accessor
            </summary>
            
            <param name="index">Layer index</param>
            
            <remarks>Allows to access network's layer.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Network.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Network"/> class
            </summary>
            
            <param name="inputsCount">Network's inputs count</param>
            <param name="layersCount">Network's layers count</param>
            
            <remarks>Protected constructor, which initializes <see cref="F:AForge.Neuro.Network.inputsCount"/>,
            <see cref="F:AForge.Neuro.Network.layersCount"/> and <see cref="F:AForge.Neuro.Network.layers"/> members.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Network.Compute(System.Double[])">
            <summary>
            Compute output vector of the network
            </summary>
            
            <param name="input">Input vector</param>
            
            <returns>Returns network's output vector</returns>
            
            <remarks>The actual network's output vecor is determined by inherited class and it
            represents an output vector of the last layer of the network. The output vector is
            also stored in <see cref="P:AForge.Neuro.Network.Output"/> property.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Network.Randomize">
            <summary>
            Randomize layers of the network
            </summary>
            
            <remarks>Randomizes network's layers by calling <see cref="M:AForge.Neuro.Layer.Randomize"/> method
            of each layer.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.ActivationNeuron">
            <summary>
            Activation neuron
            </summary>
            
            <remarks>Activation neuron computes weighted sum of its inputs, adds
            threshold value and then applies activation function. The neuron is
            usually used in multi-layer neural networks.</remarks>
            
        </member>
        <member name="F:AForge.Neuro.ActivationNeuron.threshold">
            <summary>
            Threshold value
            </summary>
            
            <remarks>The value is added to inputs weighted sum.</remarks>
            
        </member>
        <member name="F:AForge.Neuro.ActivationNeuron.function">
            <summary>
            Activation function
            </summary>
            
            <remarks>The function is applied to inputs weighted sum plus
            threshold value.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.ActivationNeuron.Threshold">
            <summary>
            Threshold value
            </summary>
            
            <remarks>The value is added to inputs weighted sum.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.ActivationNeuron.ActivationFunction">
            <summary>
            Neuron's activation function
            </summary>
            
        </member>
        <member name="M:AForge.Neuro.ActivationNeuron.#ctor(System.Int32,AForge.Neuro.IActivationFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.ActivationNeuron"/> class
            </summary>
            
            <param name="inputs">Neuron's inputs count</param>
            <param name="function">Neuron's activation function</param>
            
        </member>
        <member name="M:AForge.Neuro.ActivationNeuron.Randomize">
            <summary>
            Randomize neuron 
            </summary>
            
            <remarks>Calls base class <see cref="M:AForge.Neuro.Neuron.Randomize">Randomize</see> method
            to randomize neuron's weights and then randomize threshold's value.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.ActivationNeuron.Compute(System.Double[])">
            <summary>
            Computes output value of neuron
            </summary>
            
            <param name="input">Input vector</param>
            
            <returns>Returns neuron's output value</returns>
            
            <remarks>The output value of activation neuron is equal to value
            of nueron's activation function, which parameter is weighted sum
            of its inputs plus threshold value. The output value is also stored
            in <see cref="P:AForge.Neuro.Neuron.Output">Output</see> property.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.DistanceNeuron">
            <summary>
            Distance neuron
            </summary>
            
            <remarks>Distance neuron computes its output as distance between
            its weights and inputs. The neuron is usually used in Kohonen
            Self Organizing Map.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.DistanceNeuron.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.DistanceNeuron"/> class
            </summary>
            
            <param name="inputs">Neuron's inputs count</param>
            
        </member>
        <member name="M:AForge.Neuro.DistanceNeuron.Compute(System.Double[])">
            <summary>
            Computes output value of neuron
            </summary>
            
            <param name="input">Input vector</param>
            
            <returns>The output value of distance neuron is equal to distance
            between its weights and inputs - sum of absolute differences.
            The output value is also stored in <see cref="P:AForge.Neuro.Neuron.Output">Output</see>
            property.</returns>
            
        </member>
        <member name="T:AForge.Neuro.Neuron">
            <summary>
            Base neuron class
            </summary>
            
            <remarks>This is a base neuron class, which encapsulates such
            common properties, like neuron's input, output and weights.</remarks>
            
        </member>
        <member name="F:AForge.Neuro.Neuron.inputsCount">
            <summary>
            Neuron's inputs count
            </summary>
        </member>
        <member name="F:AForge.Neuro.Neuron.weights">
            <summary>
            Nouron's wieghts
            </summary>
        </member>
        <member name="F:AForge.Neuro.Neuron.output">
            <summary>
            Neuron's output value
            </summary>
        </member>
        <member name="F:AForge.Neuro.Neuron.rand">
            <summary>
            Random number generator
            </summary>
            
            <remarks>The generator is used for neuron's weights randomization</remarks>
            
        </member>
        <member name="F:AForge.Neuro.Neuron.randRange">
            <summary>
            Random generator range
            </summary>
            
            <remarks>Sets the range of random generator. Affects initial values of neuron's weight.
            Default value is [0, 1].</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Neuron.RandGenerator">
            <summary>
            Random number generator
            </summary>
            
            <remarks>The property allows to initialize random generator with a custom seed. The generator is
            used for neuron's weights randomization.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Neuron.RandRange">
            <summary>
            Random generator range
            </summary>
        </member>
        <member name="P:AForge.Neuro.Neuron.InputsCount">
            <summary>
            Neuron's inputs count
            </summary>
        </member>
        <member name="P:AForge.Neuro.Neuron.Output">
            <summary>
            Neuron's output value
            </summary>
            
            <remarks>The calculation way of neuron's output value is determined by inherited class.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Neuron.Item(System.Int32)">
            <summary>
            Neuron's weights accessor
            </summary>
            
            <param name="index">Weight index</param>
            
            <remarks>Allows to access neuron's weights.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Neuron.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Neuro.Neuron"/> class
             </summary>
            
             <param name="inputs">Neuron's inputs count</param>
             
             <remarks>The new neuron will be randomized (see <see cref="M:AForge.Neuro.Neuron.Randomize"/> method)
             after it is created.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Neuron.Randomize">
            <summary>
            Randomize neuron 
            </summary>
            
            <remarks>Initialize neuron's weights with random values within the range specified
            by <see cref="P:AForge.Neuro.Neuron.RandRange"/>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Neuron.Compute(System.Double[])">
            <summary>
            Computes output value of neuron
            </summary>
            
            <param name="input">Input vector</param>
            
            <returns>Returns neuron's output value</returns>
            
            <remarks>The actual neuron's output value is determined by inherited class.
            The output value is also stored in <see cref="P:AForge.Neuro.Neuron.Output"/> property.</remarks>
            
        </member>
        <member name="T:AForge.PolishExpression">
            <summary>
            Evaluator of expressions written in polish notation
            </summary>
            
            <remarks>The class evaluates expressions writen in postfix polish notation.
            The list of supported functuins is:
            <list type="bullet">
            <item><b>Arithmetic functions</b>: +, -, *, /;</item>
            <item><b>sin</b> - sine;</item>
            <item><b>cos</b> - cosine;</item>
            <item><b>ln</b> - natural logarithm;</item>
            <item><b>exp</b> - exponent;</item>
            <item><b>sqrt</b> - square root.</item>
            </list>
            Arguments for these functions could be as usual constants, written as numbers, as variables,
            writen as $&lt;var_number&gt; (<b>$2</b>, for example). The variable number is zero based index
            of variables array.
            </remarks>
            
            <example>The following sample illustrates the usage of <c>PolishExpression</c> class:
            <code>
            // expression written in polish notation
            string expression = "2 $0 / 3 $1 * +";
            // variables for the expression
            double[] vars = new double[] { 3, 4 };
            // expression evaluation
            double result = PolishExpression.Evaluate( expression, vars );
            </code>
            </example>
            
        </member>
        <member name="M:AForge.PolishExpression.#ctor">
            <summary>
            Constructor (the class should not be instantiated at this moment)
            </summary>
        </member>
        <member name="M:AForge.PolishExpression.Evaluate(System.String,System.Double[])">
             <summary>
             Evaluates specified expression
             </summary>
            
             <param name="expression">Expression written in postfix polish notation</param>
             <param name="variables">Variables for the expression</param>
             
             <returns>Evaluated value of the expression</returns>
            
        </member>
    </members>
</doc>
